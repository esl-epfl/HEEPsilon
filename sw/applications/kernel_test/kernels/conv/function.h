// Adapted from https://github.com/pulp-platform/pulpino/tree/master/sw/apps/sequential_tests/convolution
#include <stdint.h>

#define DATA_WIDTH  14
#define IMG_ROW     16
#define IMG_COL     3
#define IMG_DIM     IMG_ROW*IMG_COL



#define FILT_WIN    3
#define FILT_DIM    FILT_WIN*FILT_WIN

#define FILT_HALF   FILT_WIN/2

typedef int16_t    Filtc;
typedef int32_t    Pixel;

// general parameters

#define stride 1
#define padding 0
#define N_filters 1
#define channels 1
#define batch_size 1

// input parameters

#define H_inputs 16
#define W_inputs 3
#define C_inputs channels

// filter parameters

#define H_filter 3
#define W_filter 3
#define C_filter channels
#define FILT_HALF_x (H_filter / 2)
#define FILT_HALF_y (W_filter / 2)

// output parameters
#define N_outputs batch_size
#define H_outputs ((H_inputs + 2 * padding - H_filter) / stride) + 1
#define W_outputs ((W_inputs + 2 * padding - W_filter) / stride) + 1
#define channels_outputs N_filters

// static Pixel In_Img[IMG_DIM]        = {};
// kernel Juan and Ruben
//static Pixel In_Img[IMG_DIM]        = { 1,2,3, 4,5,6, 7,8,3, 4,4,4, 5,5,5, 6,6,6, 7,7,7, 8,8,8, 9,9,9 };
//static Pixel In_Img1[IMG_DIM]        = { 3,3,3, 2,2,2, 1,1,1, 4,4,4, 5,5,5, 6,6,6, 7,7,7, 8,8,8, 9,9,9 };
//static Filtc Filter_Kern[FILT_DIM]  = { 2, 2, 2, 2, 2, 2, 2, 2, 2};

// static Pixel Gold_Out_Img[IMG_DIM]  = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1107, 0, 0, 1586, 0, 0, 580, 0, 0, 0, 6978, 3177, 0, 0, 3691, 0, 0, 8191, 8191, 3772, 526, 260, 0, 0, 0, 0, 5911, 0, 0, 0, 0, 0, 6496, 0, 0, 2654, 0, 0, 0, 0, 0, 0, 2242, 1291, 0, 0, 0, 0, 0, 8191, 8191, 630, 2714, 7323, 3784, 0, 0, 0, 6835, 1700, 0, 0, 0, 0, 6682, 600, 80, 0, 0, 0, 0, 2494, 2933, 0, 0, 0, 773, 0, 0, 0, 0, 8191, 6585, 0, 1159, 7808, 5379, 181, 0, 0, 350, 0, 0, 0, 0, 0, 3673, 4747, 0, 0, 0, 0, 2600, 6683, 1781, 0, 0, 584, 3016, 4244, 0, 0, 0, 8191, 3543, 0, 1526, 3575, 1496, 5406, 5599, 0, 0, 0, 0, 0, 0, 0, 2610, 4523, 0, 0, 0, 2022, 4904, 6901, 0, 0, 3510, 4624, 4239, 5577, 0, 0, 0, 4639, 0, 0, 5921, 2722, 0, 8191, 8191, 0, 0, 0, 0, 0, 0, 0, 2417, 217, 0, 0, 3259, 5079, 2023, 3454, 676, 0, 3018, 5290, 3832, 4171, 0, 0, 999, 661, 0, 0, 6848, 2902, 0, 8191, 8191, 0, 0, 0, 0, 0, 0, 0, 2251, 0, 0, 0, 2341, 4463, 0, 0, 4001, 1831, 1758, 1468, 48, 1529, 0, 0, 2440, 2676, 0, 0, 1995, 568, 0, 6545, 8191, 0, 0, 0, 0, 0, 0, 0, 3540, 1527, 1923, 0, 0, 2290, 0, 0, 1775, 4485, 3919, 0, 0, 0, 0, 0, 444, 6657, 649, 0, 0, 0, 0, 3257, 4292, 309, 2130, 4606, 0, 0, 0, 0, 5202, 5155, 3720, 0, 0, 1824, 0, 0, 0, 2548, 5431, 356, 0, 0, 156, 0, 0, 7688, 2350, 0, 522, 0, 0, 387, 0, 0, 4019, 5326, 0, 0, 0, 0, 3268, 1274, 2228, 1579, 4064, 2993, 0, 0, 0, 0, 2575, 341, 0, 0, 2169, 0, 0, 5892, 257, 0, 7326, 1224, 0, 0, 403, 0, 0, 603, 0, 0, 0, 0, 0, 0, 2052, 3484, 4941, 4637, 533, 0, 0, 0, 0, 0, 0, 0, 3459, 22, 0, 2033, 0, 0, 8191, 2513, 0, 0, 5936, 1601, 0, 0, 0, 0, 0, 0, 0, 0, 3677, 0, 0, 6148, 3555, 0, 0, 0, 0, 0, 0, 0, 4421, 6087, 0, 0, 0, 0, 8191, 3753, 0, 0, 8191, 5313, 0, 0, 0, 0, 0, 0, 2126, 2819, 2679, 0, 0, 6446, 7647, 0, 0, 0, 0, 0, 0, 0, 5390, 8191, 1480, 0, 0, 0, 8191, 4234, 0, 0, 8191, 7440, 0, 0, 0, 0, 0, 0, 6874, 4928, 0, 0, 0, 4814, 7680, 2582, 0, 0, 0, 0, 0, 0, 5808, 8191, 1857, 0, 0, 3142, 3122, 600, 0, 0, 6596, 6609, 0, 0, 0, 0, 0, 0, 8191, 5960, 0, 0, 1759, 2200, 3804, 4263, 0, 0, 0, 0, 0, 438, 5258, 8191, 1451, 0, 611, 6028, 0, 0, 345, 1996, 5387, 2225, 0, 0, 0, 0, 0, 0, 7886, 8048, 0, 0, 1138, 0, 186, 5415, 23, 0, 0, 0, 521, 2253, 2000, 2777, 207, 0, 5966, 7624, 0, 0, 0, 4266, 5926, 0, 0, 0, 0, 0, 0, 0, 7339, 8191, 1406, 0, 0, 0, 0, 6710, 4621, 0, 0, 67, 997, 878, 0, 0, 0, 3237, 8191, 8191, 0, 0, 0, 2935, 7543, 0, 0, 1811, 0, 0, 0, 0, 5417, 8191, 4992, 0, 0, 0, 0, 6334, 8191, 2563, 0, 465, 1004, 786, 0, 0, 0, 4217, 8191, 7636, 1791, 0, 0, 0, 7962, 1029, 0, 185, 0, 0, 0, 0, 162, 8191, 7067, 0, 0, 0, 0, 3582, 6824, 2738, 0, 0, 368, 865, 1476, 0, 0, 1483, 8191, 8191, 6379, 0, 0, 0, 5094, 377, 0, 0, 0, 0, 0, 0, 0, 6186, 4661, 0, 0, 0, 1581, 1773, 2344, 137, 0, 0, 0, 0, 2986, 3387, 0, 0, 8191, 8191, 6243, 228, 0, 0, 1072, 0, 0, 0, 0, 0, 0, 0, 1207, 5345, 674, 0, 0, 0, 892, 1098, 3159, 1320, 0, 0, 0, 0, 1451, 5935, 0, 0, 7837, 8191, 867, 537, 2038, 0, 0, 0, 280, 371, 0, 0, 0, 0, 7274, 4640, 70, 0, 773, 0, 0, 0, 7293, 7750, 376, 0, 0, 0, 0, 1816, 0, 0, 5087, 2891, 0, 696, 5630, 1208, 0, 0, 0, 950, 0, 0, 0, 0, 6199, 0, 2559, 8191, 3106, 0, 0, 0, 8191, 8191, 3151, 0, 0, 0, 0, 0, 0, 2218, 4016, 0, 0, 0, 2877, 1992, 0, 0, 0, 0, 0, 0, 0, 0, 1910, 0, 3526, 8191, 0, 0, 0, 1556, 8191, 7492, 2267, 639, 0, 0, 0, 0, 1967, 7440, 1997, 0, 0, 0, 0, 2729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1020, 5820, 0, 0, 0, 2022, 6648, 3752, 0, 1542, 0, 0, 0, 428, 8191, 8191, 0, 0, 1366, 1094, 1794, 3696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 2950, 0, 0, 0, 821, 4210, 2196, 0, 0, 98, 0, 0, 0, 7923, 6146, 0, 0, 2103, 7055, 6029, 2358, 999, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3471, 3304, 0, 0, 0, 940, 4429, 1104, 0, 0, 2947, 4275, 0, 0, 771, 4827, 0, 0, 2843, 8191, 7074, 0, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 1728, 2815, 1910, 1361, 0, 0, 1277, 2125, 0, 0, 723, 4373, 5309, 0, 0, 0, 6040, 1733, 0, 3251, 8191, 3493, 0, 569, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };

// Never place initialized data in the interleaved section
static Pixel In_Img[IMG_DIM + FILT_DIM]        = {   
1,1,1,
2,2,2,
3,3,3,
0,1,2,
0,1,2,
0,1,2,
1,2,3,
1,2,3,
1,2,3,
2,3,4,
2,3,4,
2,3,4,
3,4,5,
3,4,5,
3,4,5,
4,5,6,
4,5,6,
4,5,6,
5,6,7 };
static int32_t input[batch_size][C_inputs][H_inputs][W_inputs]=
{
{{
{0,1,2},
{0,1,2},
{0,1,2},
{1,2,3},
{1,2,3},
{1,2,3},
{2,3,4},
{2,3,4},
{2,3,4},
{3,4,5},
{3,4,5},
{3,4,5},
{4,5,6},
{4,5,6},
{4,5,6},
{5,6,7}

}}};

static int32_t  filter[N_filters][C_filter][H_filter][W_filter]=
{
    {{{1, 1, 1},
       {2, 2, 2},
       {3, 3, 3}
    }}};

int __attribute__((section(".xheep_data_interleaved"))) input_interleaved[batch_size][C_inputs][H_inputs][W_inputs];
 int32_t __attribute__((section(".xheep_data_interleaved"))) filter_interleaved[N_filters][C_filter][H_filter][W_filter];


static int32_t outputs[N_outputs][channels_outputs][H_outputs][W_outputs];
void conv ( Pixel * Out_Img )
{
   int32_t l, r, c, k, i, j, w, t;
  int32_t S;
  int32_t coeff;
  int32_t data;

  for(int i = 0; i < H_inputs; i++){
    for(int j = 0; j < W_inputs; j++){
        input_interleaved[0][0][i][j]=input[0][0][i][j];
    }
}

for(int i = 0; i < H_filter;i++){
    for(int j = 0; j < W_filter; j++){
        filter_interleaved[0][0][i][j]=filter[0][0][i][j];
    }
}
  for (l = 0; l < N_outputs; l++)
  {
    for (k = 0; k < N_filters; k++)
    {
      for (r = 0; r < H_outputs; r++)
      {
        for (c = 0; c < W_outputs; c++)
        {
          S = 0;
          for (w = 0; w < C_filter; w++)
          {
            for (i = -FILT_HALF_x; i <= FILT_HALF_x; i++)
            {
              for (j = -FILT_HALF_y; j <= FILT_HALF_y; j++)
              {
                coeff = filter_interleaved[k][w][i + FILT_HALF_x][j + FILT_HALF_y];

                data = input_interleaved[l][w][r + i + FILT_HALF_x][c + j + FILT_HALF_y];

                S += coeff * data;
              }
            }
          }
          Out_Img[r]= S;
          
          for(int j=0;j<10000;j++) asm volatile("nop");
        }
      }
    }
  }
}