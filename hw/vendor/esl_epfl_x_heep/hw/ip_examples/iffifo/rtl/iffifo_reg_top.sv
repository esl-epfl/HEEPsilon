// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module iffifo_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 5
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output iffifo_reg_pkg::iffifo_reg2hw_t reg2hw,  // Write
    input iffifo_reg_pkg::iffifo_hw2reg_t hw2reg,  // Read


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import iffifo_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [ AW-1:0] reg_addr;
  logic [ DW-1:0] reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [ DW-1:0] reg_rdata;
  logic           reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] fifo_out_qs;
  logic fifo_out_re;
  logic [31:0] fifo_in_qs;
  logic [31:0] fifo_in_wd;
  logic fifo_in_we;
  logic status_empty_qs;
  logic status_available_qs;
  logic status_reached_qs;
  logic status_full_qs;
  logic [31:0] occupancy_qs;
  logic [31:0] watermark_qs;
  logic [31:0] watermark_wd;
  logic watermark_we;
  logic interrupts_qs;
  logic interrupts_wd;
  logic interrupts_we;

  // Register instances
  // R[fifo_out]: V(True)

  prim_subreg_ext #(
      .DW(32)
  ) u_fifo_out (
      .re (fifo_out_re),
      .we (1'b0),
      .wd ('0),
      .d  (hw2reg.fifo_out.d),
      .qre(reg2hw.fifo_out.re),
      .qe (),
      .q  (reg2hw.fifo_out.q),
      .qs (fifo_out_qs)
  );


  // R[fifo_in]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_fifo_in (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(fifo_in_we),
      .wd(fifo_in_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(reg2hw.fifo_in.qe),
      .q (reg2hw.fifo_in.q),

      // to register interface (read)
      .qs(fifo_in_qs)
  );


  // R[status]: V(False)

  //   F[empty]: 0:0
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_status_empty (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.status.empty.de),
      .d (hw2reg.status.empty.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(status_empty_qs)
  );


  //   F[available]: 1:1
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_status_available (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.status.available.de),
      .d (hw2reg.status.available.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(status_available_qs)
  );


  //   F[reached]: 2:2
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_status_reached (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.status.reached.de),
      .d (hw2reg.status.reached.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(status_reached_qs)
  );


  //   F[full]: 3:3
  prim_subreg #(
      .DW      (1),
      .SWACCESS("RO"),
      .RESVAL  (1'h0)
  ) u_status_full (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.status.full.de),
      .d (hw2reg.status.full.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(status_full_qs)
  );


  // R[occupancy]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RO"),
      .RESVAL  (32'h0)
  ) u_occupancy (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      .we(1'b0),
      .wd('0),

      // from internal hardware
      .de(hw2reg.occupancy.de),
      .d (hw2reg.occupancy.d),

      // to internal hardware
      .qe(),
      .q (),

      // to register interface (read)
      .qs(occupancy_qs)
  );


  // R[watermark]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_watermark (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(watermark_we),
      .wd(watermark_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.watermark.q),

      // to register interface (read)
      .qs(watermark_qs)
  );


  // R[interrupts]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_interrupts (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(interrupts_we),
      .wd(interrupts_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(reg2hw.interrupts.qe),
      .q (reg2hw.interrupts.q),

      // to register interface (read)
      .qs(interrupts_qs)
  );




  logic [5:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == IFFIFO_FIFO_OUT_OFFSET);
    addr_hit[1] = (reg_addr == IFFIFO_FIFO_IN_OFFSET);
    addr_hit[2] = (reg_addr == IFFIFO_STATUS_OFFSET);
    addr_hit[3] = (reg_addr == IFFIFO_OCCUPANCY_OFFSET);
    addr_hit[4] = (reg_addr == IFFIFO_WATERMARK_OFFSET);
    addr_hit[5] = (reg_addr == IFFIFO_INTERRUPTS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(IFFIFO_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(IFFIFO_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(IFFIFO_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(IFFIFO_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(IFFIFO_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(IFFIFO_PERMIT[5] & ~reg_be)))));
  end

  assign fifo_out_re = addr_hit[0] & reg_re & !reg_error;

  assign fifo_in_we = addr_hit[1] & reg_we & !reg_error;
  assign fifo_in_wd = reg_wdata[31:0];

  assign watermark_we = addr_hit[4] & reg_we & !reg_error;
  assign watermark_wd = reg_wdata[31:0];

  assign interrupts_we = addr_hit[5] & reg_we & !reg_error;
  assign interrupts_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = fifo_out_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = fifo_in_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = status_empty_qs;
        reg_rdata_next[1] = status_available_qs;
        reg_rdata_next[2] = status_reached_qs;
        reg_rdata_next[3] = status_full_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = occupancy_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = watermark_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = interrupts_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module iffifo_reg_top_intf #(
    parameter  int AW = 5,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output iffifo_reg_pkg::iffifo_reg2hw_t reg2hw,  // Write
    input iffifo_reg_pkg::iffifo_hw2reg_t hw2reg,  // Read
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  iffifo_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .hw2reg,  // Read
      .devmode_i
  );

endmodule


